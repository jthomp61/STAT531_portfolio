---
title: "Untitled"
format: html
editor: visual
---

```{r}
library(tidyverse)
library(palmerpenguins)
```

Suppose we would like to find the median of the measurement variables bill_length_mm, bill_depth_mm, flipper_length_mm, body_mass_g) from the `penguins` dataset (from the **palmerpenguins** package).

Which of the following will produce a **vector** of the median of every measurement variable?

Group of answer choices

```{r}
penguins |> 
  select(bill_length_mm:body_mass_g) |> 
  map(median, na.rm = TRUE)
```

```{r}
penguins |> 
  select(bill_length_mm:body_mass_g) |> 
  map_dbl(median, na.rm = TRUE)
```

```{r}
penguins |> 
  select(bill_length_mm:body_mass_g) |> 
  sapply(median, na.rm = TRUE)
```

```{r}
penguins |> 
  select(bill_length_mm:body_mass_g) |> 
  lapply(function(x) median(x, na.rm = TRUE))
```

Recall that in the last unit, we discussed the challenge of standardizing many columns in a data frame. For example, If we wanted to standardize a numeric variable to be centered at the mean and scaled by the standard deviation, we could use the following function:

```{r}
standardize <- function(vec) {
  stopifnot(is.numeric(vec))
  
  # Center with mean
  deviations <- vec - mean(vec, na.rm = TRUE)
  # Scale with standard deviation
  newdata <- deviations / sd(vec, na.rm = TRUE)
  
  return(newdata)
}
```

**Question 2:** Why does the following return a vector of `NA`s?

```{r}
penguins |>
  mutate(
    body_mass_g = map_dbl(body_mass_g, standardize)
  )
```

ANSWER: Because `mutate()` operates on rows, so `map_dbl()` is supplying `standardize()` with one row of `body_mass_g` at a time

**Question 3:**

Which of the following returns a [dataframe]{.underline} with the standardized version of the numerical variables (`bill_length_mm`, `bill_depth_mm`, `flipper_length_mm`, `body_mass_g`) from the `penguins` dataset?

```{r}
## Option (a)
penguins |> 
  select(bill_length_mm:body_mass_g) |> 
  map_df(standardize)

## Option (b)
# penguins |>
#   map_at(bill_length_mm:body_mass_g, standardize)

## Option (c)
# penguins |> 
#   map_if(is.numeric, standardize)

## Option (d)
# penguins |> 
#   map_at(
#     c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
#     standardize
#     )
```

# Tuesday Lecture

```{r}
library(glue)
```

When we need to use `for()` loops:

-   recursive loop current position depends on previous position.

## The `map()` family

-   live in purr family
-   take data frame column or vector

```{r}
simple_map <- function(x, f, ...) {
  out <- vector(mode = "list", length = length(x))
  for (i in seq_along(x)) {
    out[[i]] <- f(x[[i]], ...)
  }
  out
}
```

What we are familiar with:

```{r}
penguins %>% 
  summarize(
    across(
      .cols = where(is.numeric), 
      .fns = mean, na.rm = TRUE
    )
  )
```

-   the output of a summarize is always a dataframe

New:

```{r}
penguins %>% 
  select(where(is.numeric)) %>% 
  map_dbl(mean, na.rm = TRUE)
```

-   now, the output is a vector. But they still have names, but are not column names, it is a vector that has specific attributes, the vector is named!!!

-   what length can the function be output for this? ONE! Because it is a VECTOR, `map_dbl()` must have a length one. Cannot do both mean and median

Familiar:

```{r}

penguins %>% 
  mutate(
    across(
      .cols = where(is.numeric), 
      .fns = scale
    )
  )
```

-   Outputs a Dataframe

New

```{r}
#| output: false

scale_penguins <- penguins %>% 
  map_if(is.numeric, scale)
```

-   This is not going to give me a vector. But a LIST

Why not just use `across()`

-   not all functions are vectorized, `map()` help when functions are not functions

\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_

## Example for Practice Activity

```{r}
around_the_world <- function(n){
  lyrics <- map_chr(1:n, ~ "Around the World") 
  # ~ means 'I am writing a funcitons'
  
  return(
    glue::glue("{lyrics}") 
    )
}
```

```{r}
map_chr(1:9, ~ "Around the World")
```

```{r}
around_the_world(4)
```

### Example of glue:

```{r}
name <- "Fred"
glue('My name is {name}.')
```

## Another Example:

**99 Bottles of Beer**

99 bottles of beer on the wall, 99 bottles of beer. Take one down, pass it around, 98 bottles of beer on the wall\...

```{r}
# helper funciton

bottles_lyrics <- function(n){
  lyrics <- glue::glue("{n} bottles of beer on the wall, {n} bottles of beer \nTake one down, pass it around, {n -1} bottles of beer on the wall")
  return(lyrics)
}
bottles_lyrics(3)
```

what if I want to sing iterativley...

```{r}
bottles_song <- function(n){
  song <- map_chr(n:0, bottles_lyrics)
  return(
    glue::glue("{song}")
  )
}
```

```{r}
bottles_song(3)
```

hmmm need to have new line when there is 0 bottles of beer

**No more bottles of beer on the wall, no more bottles of beer.\
Go to the store and buy some more, 99 bottles of beer on the wall\...**

```{r}
bottles_lyrics <- function(n){
  if(n == 0){
    lyrics <- glue::glue("No more bottles of beer on the wall, no more bottles of beer. \nGo to the store and buy some more, {n} bottles of beer on the wall")
  } else{
  lyrics <- glue::glue("{n} bottles of beer on the wall, {n} bottles of beer \nTake one down, pass it around, {n -1} bottles of beer on the wall")
  }
  return(lyrics)
}
```

However the `if()` and `else()` is NOT vectorized, so we have to use the map function

```{r}
bottles_song(4)
```
