---
title: "Practice Activity 7"
format: html
editor: visual
---

## Question 1:

Write a function called `divide_and_round()`, which takes a number or vector of numbers, divides them all by their smallest value, and rounds the results to the nearest whole number.

```{r}
divide_and_round <- function(nums){
  
  my_min <- min(nums, na.rm = TRUE)
  divided <- nums/my_min
  return(round(divided))
}

test <- c(5:10, NA)
divide_and_round(test)
```

## Question 2:

Write a function called `no_nines_or_twelves()`, which takes a number or vector of numbers and returns `TRUE` if the number(s) **are not** divisible by 9 or 12, and returns `FALSE` otherwise.

```{r}
no_nines_or_twelves <- function(nums){
  
  check <- if_else(!(nums %% 9 == 0 | nums %% 12 == 0),
                   TRUE,
                   FALSE
                   )
  return(check)
}

test <- c(3:12*5, NA)

no_nines_or_twelves(test)
```

## Question 3:

Write a function called `every_other()` which takes a vector and returns every other value in the vector.

**Do not** use a `for()` loop to do this! Accomplish this with the `seq_along()` function, bracket subsetting (`[]`), and modulus arithmetic (`%%`).

Include an optional argument called "start" which lets you choose where to start skipping; that is, if `start = 1`, the function returns the 1st, 3rd, 5th, etc. values and if `start = 2`, the function returns the 2nd, 4th, 6th, etc. values.

```{r}
every_other <- function(vec, start = 1){
  
  if(start == 2){
    return(vec[seq(2, length(vec), 2)]) 
    
  } else if(start == 1) {
    return(vec[seq(1, length(vec), 2)])
    
  } else{
    return("enter a start value of 1 or 2")
  }
}


test <- c(1:10)

every_other(test)
every_other(test, start = 2)
```

## Question 4:

Write a function called `shorten()` which takes a vector, drops the values **before** the cumulative sum is greater than a provided number, and returns the remaining values.

**Do not** use a `while()` loop to do this! Accomplish this with the `cumsum()` function and bracketing.

Be sure to test your function!

```{r}
shorten <- function(vec, maxsum){
  
  sum_vec <- cumsum(vec)
  
  T_F_vec <- if_else(sum_vec > maxsum,
                     TRUE,
                     FALSE)
  
  return(vec[T_F_vec])
          
}

test <- c(1:10)
shorten(test, 20)
```

<https://discuss.analyticsvidhya.com/t/how-to-remove-value-from-a-vector-in-r/2975>

```{r}
shorten <- function(vec, maximum) {
  sum_vec <- cumsum(vec)
  values <- which(sum_vec >= maximum)
  
  if_else(sum_vec > maximum,
           return(vec[values]),
           return(vex))
}

test <- c(11:20)

shorten(test, 20)
```

```{r}
sum_vec <- c(1, 24, 18, 2, 9, 13, 14, 19, 14, 39, 48, 8, 21, 12, 9, 108, 18, 16, 8, 27, 4, 12, 23, 42, 15, 36, 18)

sum_vec <- cumsum(sum_vec)
sum_vec

test_TF <- if_else(sum_vec < 350,
        TRUE,
        FALSE)

sum_vec[test_TF]
```

## Question 5

Once you have written your four functions correctly, copy-paste and run the following code:

```{r}
my_vec <- c(39, 1.87, 48, 11, 8, 45, 21, 5, 12, 33, 9, 11, 108, 4, 18, 5, 16,
            17, 8, 48, 27, 24, 4, 22, 12, 27, 23, 46, 42, 35, 15, 34, 36, 26,
            18, 10, 18.21, 72.04, 36.9, 41.81, 29, 89.75, 34.03, 20.18, 48.74,
            15.76, 31.86, 83.6, 43.55, 39.99, 23.55, 8.54, 24.71, 22.02, 9.71,
            62.14, 35.46, 16.61, 15.66, 21.29, 30.52, 201.07, 45.81, 7.85,
            30.13, 34.14, 22.62, 10.2, 6.02, 30.12, 10.64, 31.72, 24.57, 14.43,
            43.37, 89.93, 44.72, 51.32, 13.62, 45.56, 22.96, 7.05, 29.99, 41.38,
            26.59, 23.04, 19.82, 50.73, 39.56, 43.79, 30.22, 85.85, 5.78, 78.85,
            29.52, 66.27, 44.06, 27.28, 24.43, 64.32, 3.35, 67.45, 46.72, 48.44,
            48.65, 33.3, 40.28, 19.04)

my_vec <- every_other(my_vec, start = 2)
# Should have 54 elements! 
length(my_vec)

my_vec <- divide_and_round(my_vec)
# 
my_vec <- every_other(my_vec, start = 1)
# # Should have 27 elements!
length(my_vec)
my_vec
# 
my_vec <- shorten(my_vec, 350)
# # Should have 12 elements!
length(my_vec)
my_vec
# 
my_vec <- my_vec[no_nines_or_twelves(my_vec)]
# # Should have 6 elements! 
length(my_vec)
my_vec

my_vec <- sort(my_vec)
# 
my_vec
```
