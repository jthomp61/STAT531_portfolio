---
title: "Practice Activity 8: The 12 Days of Christmas"
format: html
editor: visual
---

```{r packages}
#| include: false
library(dplyr)
library(glue)
library(stringr)
library(purrr)
```

string detect could be useful to look for double o 'oo' and change to 'ee' for goose to geese

### A Test Dataset

Run the code below to load up a dataset called `xmas` that contains the crucial information about the gifts in the song. We will use this dataset to test out our functions as we work on them.

```{r}
xmas <- read.csv("https://www.dropbox.com/s/e584pryn8evm1gz/xmas.csv?dl=1")
```

------------------------------------------------------------------------

## Step One: Plurals

Note that the gifts are listed in singular: for example, on day five the narrator receives "five golden rings", but the entry in the dataset for the gift on day five simply says "ring".

Below is a function `pluralize_gift()` that takes as input: a vector of stings, and returns: a vector of stings.

```{r pluralize-function}
# Function that takes a noun and makes it plural
# Arguments -- gift -- A string or vector of strings
# Return -- A string or vector of strings with the pluralized words

pluralize_gift <- function(gift){

gift <- case_when(str_detect(gift, "oo") ~ str_replace(gift, "oo", "ee"),
                  str_detect(gift, "y$") ~ str_replace(gift, "y$", "ies"),
                  TRUE ~ str_c(gift, "s")
                )

return(gift)

}
```

### Test Your Function

Try your function out on the smaller and then larger gift dataset. Consider: is your function *vectorized*? It does not have to be, but you can try it out if you want!

```{r pluralize-test}

## This will work if your function is vectorized!
pluralize_gift(xmas$Gift.Item)

## This will work if your function is not vectorized!
purrr::map_chr(xmas$Gift.Item, pluralize_gift)

```

------------------------------------------------------------------------

## Step Two: Creating sentences

Next I wrote a function called `make_phrase()` that takes as input the necessary information, and returns a phrase. For example,

    make_phrase(num_word = "ten", 
                item = "lords", 
                verb = "a-leaping", 
                adjective = "", 
                location = "")

should return

    "ten lords a-leaping"

```{r phrase-function}
make_phrase <- function(num_word, item, verb, adjective, location) {
  
  ## Step 1: Replace NAs with blank strings
  verb <- str_replace_na(verb, "")
  location <- str_replace_na(location, "")
  adjective <- str_replace_na(adjective, "")
  
  ## Step 2: If the day is larger than 1, the items need pluralized! 
  item <- if_else(num_word == "one", item, pluralize_gift(item))
  
  ## Step 3: If the word starts with a vowel, add "an" to the beginning
  str_detect(item, "^(a|e|i|o|u)") ~ str_c("an ", item)
  
  ## Step 4: Glue all of the pieces together! 
  case_when(num_word == "one" ~ glue::glue("a {item} {location}"),
            num_word %in% c("two","three", "four", "five") ~ 
              glue::glue("{num_word} {adjective} {item}"),
            TRUE ~ glue::glue("{num_word} {item} {verb}")
            )

}
```

### Test Your Function

Try your function out on the `xmas` data, by making a new variable containing the daily phrases. Notice I've provided you with the code to iterate through each row of the dataset to create a phrase--all you need to do is provide the necessary inputs into `pmap_chr()`.

```{r}
xmas2 <- xmas %>%
  mutate(day.num = as.character(english::english(Day)
                                ), 
    Full.Phrase = pmap_chr(
      list(num_word = day.num,
           item = Gift.Item,
           verb = Verb,
           adjective = Adjective,
           location = Location),
      make_phrase
      )
  )
```

check that they are agreeing

## Submission

Your `Full.Phrase` column is the answer to this week's Practice Activity.

**Copy and paste your `Full.Phrase` column to show me the phrases you made!**

```{r}
print(xmas2$Full.Phrase)
```
